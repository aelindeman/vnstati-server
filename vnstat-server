#!/usr/bin/python
"""
Alex Lindeman
2016-08-14
Displays images from vnstati via HTTP requests.
"""

import os
import subprocess
from argparse import ArgumentParser
from SimpleHTTPServer import SimpleHTTPRequestHandler
from SocketServer import TCPServer

try:
	subprocess.check_output(["which", "vnstati"])
except:
	print "vnstati does not appear to be installed"
	exit()

argparser = ArgumentParser(prog="vnstati-server", description="HTTP server for vnstati")
argparser.add_argument("-l", "--listen", nargs=1, default="0.0.0.0", help="Address to listen on")
argparser.add_argument("-p", "--port", nargs=1, default=7654, help="Port on which to listen")
argparser.add_argument("-d", "--dbdir", nargs=1, default="/var/lib/vnstat", help="vnstat database directory")
args = argparser.parse_args()

listen = (args.listen, args.port)
wd = args.dbdir

if not os.path.isdir(wd):
	print "non-standard vnstat database directories are not currently supported"
	exit()

interfaces = sorted([ iface for iface in os.listdir(wd) if not iface.startswith(".") ])
types = sorted(['d', 'h', 'm', 's', 't'])

class VnstatiHandler(SimpleHTTPRequestHandler):
	def do_GET(self):
		response = None
		try:
			try:
				iface, type = self.path.lstrip('/').rstrip('/').split('/')
			except:
				raise Exception("usage: %s:%i/<interface>/<type>\n\tinterfaces: %s\n\ttypes: %s" % (listen[0], listen[1], ", ".join(interfaces), ", ".join(types)))

			if iface not in interfaces:
				raise Exception("invalid interface\n\tinterfaces: %s\n" % ", ".join(interfaces))

			if type not in types:
				raise Exception("invalid type\n\ttypes: %s\n" % ", ".join(types))

		except Exception as e:
			self.send_response(400)
			self.send_header("Content-Type", "text/plain; charset=utf-8")
			response = "%s\n" % e
		else:
			self.send_response(200)
			self.send_header("Content-Type", "image/png")
			response = subprocess.check_output(["vnstati", "-%s" % type, "-i", iface, "-o", "-"])
		finally:
			self.end_headers()
			self.wfile.write(response)

handler = VnstatiHandler
httpd = TCPServer(listen, handler)

try:
	print "listening on %s:%s from %s" % (listen[0], listen[1], wd)
	print "available interfaces: %s" % ", ".join(interfaces)
	httpd.serve_forever()

except:
	print "cleaning up"
	httpd.socket.close()
